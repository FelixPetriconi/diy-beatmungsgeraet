/*******************************************************************************************
*    Copyright 2020 Felix Petriconi
*    Distributed under the Boost Software License, Version 1.0.
*    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
********************************************************************************************/

#ifndef GRAPHRENDERER_H
#define GRAPHRENDERER_H

#include "PressureMeasurement.h"

#include <QGraphicsScene>

#include <vector>

namespace DIYV
{

class GraphRenderer
{
public:
    GraphRenderer(QGraphicsScene& scene);

    QGraphicsScene& scene();

    void setXScale(double scale);

    void setYScale(double scale);

    void setRecentTimeWindow(std::chrono::seconds recentWindow);

    void appendNewValue(PressureMeasurement val);

    void setAllValues(std::vector<PressureMeasurement> values);

    void clear();

    void update();

    void start();

private:
    using Measurements = std::vector<PressureMeasurement>;
    QPolygonF convertMeasurements(Measurements::const_iterator begin, Measurements::const_iterator end, std::chrono::steady_clock::time_point offset) const;

    QGraphicsScene& _scene;
    QGraphicsPolygonItem* _currentGraph = nullptr;
    QGraphicsPolygonItem* _previousGraph = nullptr;
    double _xScale = 60.0;
    double _yScale = 1.0;
    std::chrono::seconds _recentWindow;
    std::chrono::steady_clock::time_point _previousStart;
    std::vector<PressureMeasurement> _values;
};

}
#endif // GRAPHRENDERER_H
